#!/usr/bin/env bash
set -euo pipefail

# Source API key and devices (devices array defined in auth.sh)
source auth.sh

# Hardcoded SKU (do not change per requirements)
SKU="H6008"

#--- Logging -----------------------------------
log() {
  echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*" >&2
}

#--- Response Handling -------------------------
handle_response() {
  local response="$1"
  local code
  code=$(echo "$response" | jq -r '.code' 2>/dev/null || echo "")
  if [[ "$code" =~ ^[0-9]+$ ]]; then
    if (( code == 200 )); then
      echo "Success"
    else
      echo "Error: $response"
    fi
  else
    echo "Error: Invalid response from server"
    echo "$response"
  fi
}

#--- HTTP Request with Retries ----------------
send_request() {
  local json="$1"
  local retries=3
  local response

  until (( retries == 0 )); do
    if response=$(curl -sS -X POST "https://openapi.api.govee.com/router/api/v1/device/control" \
      -H "Content-Type: application/json" \
      -H "Govee-API-Key: ${API_KEY}" \
      -d "$json"); then
      handle_response "$response" && return 0
    else
      log "Request failed, retrying... ($(( --retries )) retries left)"
      sleep 1
    fi
  done

  echo "Error: All retries failed"
  return 1
}

#--- Utility Functions -------------------------
to_kelvin() {
  local scale=$1
  echo $((9000 - scale * 7000 / 100))
}

validate_range() {
  local name=$1 value=$2 min=$3 max=$4
  if ! [[ $value =~ ^[0-9]+$ ]] || (( value < min || value > max )); then
    echo "❌ $name must be between $min and $max" >&2
    exit 1
  fi
}

convert_rgb() {
  local r=$1 g=$2 b=$3
  for c in "$r" "$g" "$b"; do
    if ! [[ $c =~ ^[0-9]+$ ]] || (( c < 0 || c > 255 )); then
      echo "Error: RGB values must be 0-255." >&2
      return 1
    fi
  done
  echo $(( r * 65536 + g * 256 + b ))
}

#--- Control Functions -------------------------
control_power() {
  local device=$1 value=$2
  send_request "$(jq -n \
    --arg id "$device" \
    --arg sku "$SKU" \
    --argjson v $value \
    '{requestId: "uuid", payload: {sku: $sku, device: $id, capability: {type: "devices.capabilities.on_off", instance: "powerSwitch", value: $v}}}')"
}

control_brightness() {
  local device=$1 value=$2
  send_request "$(jq -n \
    --arg id "$device" \
    --arg sku "$SKU" \
    --argjson v $value \
    '{requestId: "uuid", payload: {sku: $sku, device: $id, capability: {type: "devices.capabilities.range", instance: "brightness", value: $v}}}')"
}

control_color() {
  local device=$1 instance=$2 value=$3
  send_request "$(jq -n \
    --arg id "$device" \
    --arg sku "$SKU" \
    --arg inst "$instance" \
    --argjson v $value \
    '{requestId: "uuid", payload: {sku: $sku, device: $id, capability: {type: "devices.capabilities.color_setting", instance: $inst, value: $v}}}')"
}

#--- Presets -----------------------------------
apply_preset() {
  local preset=$1

  case "$preset" in
    sunset)
    # https://www.color-hex.com/color-palette/87115
      control_brightness "${devices[0]}" 20
      control_color "${devices[0]}" colorRgb "$(convert_rgb 0 81 255)"

      control_brightness "${devices[1]}" 20
      control_color "${devices[1]}" colorRgb "$(convert_rgb 233 50 73)"

      control_brightness "${devices[2]}" 20
      control_color "${devices[2]}" colorRgb "$(convert_rgb 191 64 191)"
      ;;
    ocean)
      # Example for 3 lights: light blue, deep blue, dark blue
      control_brightness "${devices[0]}" 80
      control_color "${devices[0]}" colorRgb "$(convert_rgb 0 191 255)"

      control_brightness "${devices[1]}" 80
      control_color "${devices[1]}" colorRgb "$(convert_rgb 0 0 255)"

      control_brightness "${devices[2]}" 80
      control_color "${devices[2]}" colorRgb "$(convert_rgb 25 25 112)"
      ;;
    brightwhite)
      # Set all lights to pure white
      for dev in "${devices[@]}"; do
        control_brightness "$dev" 100
        control_color "$dev" colorTemperatureK "$(to_kelvin 100)"
      done
      ;;
    *)
      echo "Error: Unknown preset '$preset'" >&2
      exit 1
      ;;
  esac
}

#--- Help/Usage -------------------------------
display_help() {
  cat <<EOF

Usage: $(basename "$0") [options]

Options:
  -d <1|2|3>        Select device index
  -x <0-100>        Set brightness
  -w <0-100>        Set color temperature
  -r <0-255>        Red component
  -g <0-255>        Green component
  -b <0-255>        Blue component
  -o                Turn on
  -f                Turn off
  -p <preset>       Apply a preset (e.g., sunset, ocean, brightwhite)
  -h                Display this help

Example:
  $(basename "$0") -d 2 -r 255 -g 0 -b 0
  $(basename "$0") -p sunset
EOF
}

#--- Main --------------------------------------
if (( $# == 0 )); then
  display_help
  exit 0
fi

# Initialize inputs
r="" g="" b="" bright="" temp="" power="" preset=""
device_selected=false

while getopts ":d:x:w:r:g:b:ofhp:" opt; do
  case $opt in
    d) idx=$OPTARG; device_selected=true ;;
    x) validate_range "Brightness" "$OPTARG" 0 100; bright=$OPTARG ;;
    w) validate_range "TempScale" "$OPTARG" 0 100; temp=$OPTARG ;;
    r) r=$OPTARG ;;
    g) g=$OPTARG ;;
    b) b=$OPTARG ;;
    o) power=1 ;;  f) power=0 ;;
    p) preset=$OPTARG ;;
    h|*) display_help; exit 0 ;;
  esac
done

if [[ -n $preset ]]; then
  apply_preset "$preset"
  exit 0
fi

if ! $device_selected; then
  targets=("${devices[@]}")
else
  targets=("${devices[$((idx-1))]}")
fi

for dev in "${targets[@]}"; do
  [[ -n $power ]]   && control_power      "$dev" "$power"
  [[ -n $bright ]]  && control_brightness "$dev" "$bright"
  [[ -n $temp ]]    && control_color      "$dev" colorTemperatureK "$(to_kelvin "$temp")"

  if [[ -n $r || -n $g || -n $b ]]; then
    if [[ -z $r || -z $g || -z $b ]]; then
      echo "Error: all RGB components (-r, -g, -b) are required." >&2
      exit 1
    fi
    rgb_int=$(convert_rgb "$r" "$g" "$b")
    control_color "$dev" colorRgb "$rgb_int"
  fi
done
