#!/bin/bash
source auth.sh

# Converts a scale from 0-100 to Kelvin (2000-9000)
to_kelvin() {
  local scale="$1"
  local kelvin=$((9000 - scale * 7000 / 100))
  echo "$kelvin"
}

# Generic function to handle API responses
handle_response() {
  local response="$1"
  local status_code
  status_code=$(echo "$response" | jq -r '.code' 2>/dev/null)

  if [[ "$status_code" =~ ^[0-9]+$ ]]; then
    if [ "$status_code" -eq 200 ]; then
      echo "Success"
    else
      echo "Error: $response"
    fi
  else
    echo "Error: Invalid response from server"
    echo "$response"
  fi
}

# Sends API request for controlling power (on/off)
control_power() {
  local device="$1"
  local value="$2"
  local payload=$(cat <<EOF
{
  "requestId": "uuid",
  "payload": {
    "sku": "H6008",
    "device": "$device",
    "capability": {
      "type": "devices.capabilities.on_off",
      "instance": "powerSwitch",
      "value": $value
    }
  }
}
EOF
)
  local response
  response=$(curl -s -X POST "https://openapi.api.govee.com/router/api/v1/device/control" \
    -H "Content-Type: application/json" \
    -H "Govee-API-Key: ${API_KEY}" \
    -d "$payload")

  handle_response "$response"
}

# Sends API request to control temperature (scale 0-100)
control_temp() {
  local device="$1"
  local scale="$2"
  local kelvin
  kelvin=$(to_kelvin "$scale")

  local payload=$(cat <<EOF
{
  "requestId": "uuid",
  "payload": {
    "sku": "H6008",
    "device": "$device",
    "capability": {
      "type": "devices.capabilities.color_setting",
      "instance": "colorTemperatureK",
      "value": $kelvin
    }
  }
}
EOF
)

  local response
  response=$(curl -s -X POST "https://openapi.api.govee.com/router/api/v1/device/control" \
    -H "Content-Type: application/json" \
    -H "Govee-API-Key: ${API_KEY}" \
    -d "$payload")

  handle_response "$response"
}

# Sends API request to control brightness (0-100)
control_brightness() {
  local device="$1"
  local value="$2"

  local payload=$(cat <<EOF
{
  "requestId": "uuid",
  "payload": {
    "sku": "H6008",
    "device": "$device",
    "capability": {
      "type": "devices.capabilities.range",
      "instance": "brightness",
      "value": $value
    }
  }
}
EOF
)

  local response
  response=$(curl -s -X POST "https://openapi.api.govee.com/router/api/v1/device/control" \
    -H "Content-Type: application/json" \
    -H "Govee-API-Key: ${API_KEY}" \
    -d "$payload")

  handle_response "$response"
}

# Converts RGB values to an integer
convert_rgb() {
  local r="$1"
  local g="$2"
  local b="$3"

  # Validate RGB values are within 0-255 range
  for color in "$r" "$g" "$b"; do
    if [[ ! "$color" =~ ^[0-9]+$ ]] || [ "$color" -lt 0 ] || [ "$color" -gt 255 ]; then
      echo "Error: Invalid RGB value ($color). Must be between 0 and 255."
      return 1
    fi
  done

  local rgb_value=$((r * 65536 + g * 256 + b))
  echo "$rgb_value"
}

# Sends API request to control RGB colors
control_rgb() {
  local device="$1"
  local r="$2"
  local g="$3"
  local b="$4"
  local rgb_integer

  rgb_integer=$(convert_rgb "$r" "$g" "$b") || return 1

  local payload=$(cat <<EOF
{
  "requestId": "uuid",
  "payload": {
    "sku": "H6008",
    "device": "$device",
    "capability": {
      "type": "devices.capabilities.color_setting",
      "instance": "colorRgb",
      "value": $rgb_integer
    }
  }
}
EOF
)

  local response
  response=$(curl -s -X POST "https://openapi.api.govee.com/router/api/v1/device/control" \
    -H "Content-Type: application/json" \
    -H "Govee-API-Key: ${API_KEY}" \
    -d "$payload")

  handle_response "$response"
}

# Displays help/usage information
display_help() {
  cat << EOF

Options:
  -d <Number>    Select device (1, 2, or 3)
  -x <Value>     Set brightness (0-100)
  -w <Value>     Set warm color temperature (1-100)
  -r <Value>     Set red value (0-255)
  -g <Value>     Set green value (0-255)
  -b <Value>     Set blue value (0-255)
  -o             Turn the device(s) on
  -f             Turn the device(s) off

Examples:
  lights -o                  Turn on all devices (default)
  lights -d 1 -b 50          Set brightness to 50% on device 1
  lights -w 50               Set all devices to 50% warm color
  lights -d 2 -r 255 -g 0 -b 0  Set device 2 color to red
  lights -d 3 -f             Turn off device 3

EOF
}

# Handle command-line arguments
if [ $# -eq 0 ]; then
  display_help
  exit 0
fi

# Variables for storing RGB and brightness/color values
r_value=""
g_value=""
b_value=""
brightness_value=""
color_scale=""
power=""

# Variable to track if a device was explicitly selected
device_selected=false

# Parse arguments
while getopts "x:w:d:r:g:b:of" opt; do
  case $opt in
    x) brightness_value=$OPTARG ;;  # Brightness
    w) color_scale=$OPTARG ;;  # Color temperature
    d) selected_devices=("${devices[$((OPTARG - 1))]}"); device_selected=true ;;  # Select device
    r) r_value=$OPTARG ;;  # Red value
    g) g_value=$OPTARG ;;  # Green value
    b) b_value=$OPTARG ;;  # Blue value
    o) power=1 ;;  # Turn on
    f) power=0 ;;  # Turn off
    *) display_help; exit 1 ;;
  esac
done

# If no specific device is selected, apply to all devices
if [ "$device_selected" = false ]; then
  selected_devices=("${devices[@]}")
fi

# Apply power setting if specified
if [ -n "$power" ]; then
  for device in "${selected_devices[@]}"; do
    control_power "$device" "$power"
  done
fi

# Apply color temperature if specified
if [ -n "$color_scale" ]; then
  for device in "${selected_devices[@]}"; do
    control_temp "$device" "$color_scale"
  done
fi

# Apply brightness if specified
if [ -n "$brightness_value" ]; then
  for device in "${selected_devices[@]}"; do
    control_brightness "$device" "$brightness_value"
  done
fi

# Apply RGB if all values are provided
if [ -n "$r_value" ] && [ -n "$g_value" ] && [ -n "$b_value" ]; then
  for device in "${selected_devices[@]}"; do
    control_rgb "$device" "$r_value" "$g_value" "$b_value"
  done
elif [ -n "$r_value" ] || [ -n "$g_value" ] || [ -n "$b_value" ]; then
  echo "Error: You must provide values for all RGB components (-r, -g, -b)."
fi
